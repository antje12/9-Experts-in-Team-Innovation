version: "3"
services:
  namenode:
    #restart: unless-stopped
    image: apache/hadoop:3
    hostname: namenode
    command: ["hdfs", "namenode"]
    ports:
      - 9870:9870
    env_file:
      - ./HDFS/config
    environment:
        ENSURE_NAMENODE_DIR: "/tmp/hadoop-root/dfs/name"
    
  datanode:
    #restart: unless-stopped
    image: apache/hadoop:3
    command: ["hdfs", "datanode"]
    env_file:
      - ./HDFS/config
    volumes:
      - ./datanode_data:/hadoop/dfs/data
  
  resourcemanager:
    #restart: unless-stopped
    image: apache/hadoop:3
    hostname: resourcemanager
    command: ["yarn", "resourcemanager"]
    ports:
        - 8088:8088
    env_file:
      - ./HDFS/config
    volumes:
      - ./test.sh:/opt/test.sh

  nodemanager:
    #restart: unless-stopped
    image: apache/hadoop:3
    command: ["yarn", "nodemanager"]
    env_file:
      - ./HDFS/config

  hive-server:
    #restart: unless-stopped
    image: bde2020/hive:2.3.2-postgresql-metastore
    env_file:
      - ./HDFS/hadoop-hive.env
    depends_on:
      - hive-metastore
      - namenode
      - datanode
    environment:
      SERVICE_PRECONDITION: "hive-metastore:9083"
      HIVE_CORE_CONF_javax_jdo_option_ConnectionURL: "jdbc:postgresql://hive-metastore/metastore"

  hive-metastore:
    image: bde2020/hive:2.3.2-postgresql-metastore
    env_file:
      - ./HDFS/hadoop-hive.env
    depends_on:
      - hive-metastore-db
    command: /opt/hive/bin/hive --service metastore
    environment:
      SERVICE_PRECONDITION: "namenode:9870 hive-metastore-db:5432"
    ports:
      - "9083:9083"

  hive-metastore-db:
    #restart: unless-stopped
    build: 
      context: ./HIVE
      dockerfile: Dockerfile
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  redis-server:
    image: redis
    ports:
      - 6379:6379
    volumes:
      - ./AguardioEIT/RedisPlugin/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf

  api:
    build: 
      context: ./AguardioEIT
      dockerfile: Dockerfile
    ports:
      - 8080:80
    depends_on:
      - postgres
      - mongo.one.db
      - mongo.two.db
      - mongo.three.db
    environment:
      - DOCKERIZED=true

  postgres:
    image: postgres:13
    environment:
      POSTGRES_DB: aguardio
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_sensor_data:/var/lib/postgresql/data
    ports:
      - 5444:5432
  
  mongo.one.db:
    container_name: mongo.one.db
    image: mongo:latest
    volumes:
      - mongo.one.vol:/data/db
    restart: always
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "dbrs" ]
 
  mongo.two.db:
    container_name: mongo.two.db
    image: mongo:latest
    depends_on:
      - mongo.one.db
    volumes:
      - mongo.two.vol:/data/db
    restart: always
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "dbrs" ]
 
  mongo.three.db:
    container_name: mongo.three.db
    image: mongo:latest
    depends_on:
      - mongo.one.db      
    volumes:
      - mongo.three.vol:/data/db
    restart: always
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "dbrs" ]
 
volumes:
  postgres_data:
  postgres_sensor_data:
  mongo.one.vol:
    name: "mongo.one.vol"
  mongo.two.vol:
    name: "mongo.two.vol"
  mongo.three.vol:
    name: "mongo.three.vol"